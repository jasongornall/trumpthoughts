// Generated by CoffeeScript 1.8.0
var NAV, SUBJECTS, TIMES, authedData, end_time, links_ref, msnry, past_questions, ran_items, ref, start_time, subject_selected, times_selected;

msnry = null;

ref = new Firebase("https://question-everything.firebaseio.com");

links_ref = new Firebase("https://question-links.firebaseio.com");

NAV = {};

SUBJECTS = {
  'fun': 'Fun',
  'serious': 'Serious',
  'stories': 'Stories',
  'whatever': 'Whatever'
};

TIMES = {
  'hour': 'past hour',
  'day': 'past 24 hours',
  'year': 'past year',
  'all': 'all time'
};

authedData = null;

start_time = 0;

end_time = Date.now();

past_questions = [];

ran_items = ['fun', 'serious', 'stories', 'whatever'];

subject_selected = ran_items[Math.floor(Math.random() * ran_items.length)];

times_selected = 'all';

ref.authAnonymously(function(err, data) {
  var history_link, questionHtml, renderHeader, renderQuestion;
  renderHeader = function() {
    var $header;
    $header = $('body > .container > .header');
    $header.html(teacup.render(function() {
      div('.nav', function() {
        var key, val, _results;
        _results = [];
        for (key in NAV) {
          val = NAV[key];
          _results.push(div('.nav-item', {
            'data': {
              'nav': key
            }
          }, function() {
            return val;
          }));
        }
        return _results;
      });
      div('.subjects', function() {
        var key, val, _results;
        _results = [];
        for (key in SUBJECTS) {
          val = SUBJECTS[key];
          _results.push(div('.subject', {
            'data': {
              subject: key,
              selected: "" + (key === subject_selected)
            }
          }, function() {
            return val;
          }));
        }
        return _results;
      });
      return div('.times', function() {
        var key, val, _results;
        _results = [];
        for (key in TIMES) {
          val = TIMES[key];
          _results.push(div('.time', {
            'data': {
              time: key,
              selected: "" + (key === times_selected)
            }
          }, function() {
            return val;
          }));
        }
        return _results;
      });
    }));
    $header.find('.nav-item').on('click', function(e) {
      var $el;
      $el = $(e.currentTarget);
      $el.siblings().attr('data-selected', false);
      return $el.attr('data-selected', true);
    });
    $header.find('.subjects .subject').on('click', function(e) {
      var $el;
      $el = $(e.currentTarget);
      $el.siblings().attr('data-selected', false);
      $el.attr('data-selected', true);
      return renderQuestion($el.data('subject'));
    });
    return $header.find('.time').on('click', function(e) {
      var $el, $questions;
      $el = $(e.currentTarget);
      $el.siblings().attr('data-selected', false);
      $el.attr('data-selected', true);
      $questions = $('body .questions');
      return renderQuestion($questions.data('link'), $questions.data('previous'));
    });
  };
  questionHtml = function(data, wrapper) {
    var answer, item, key, link, question, title, vote, _ref;
    if (wrapper == null) {
      wrapper = '.question';
    }
    _ref = data || {}, question = _ref.question, vote = _ref.vote, title = _ref.title, key = _ref.key, answer = _ref.answer, link = _ref.link;
    item = localStorage.getItem(key) || {};
    return teacup.render(function() {
      return div(wrapper, {
        'data-key': key,
        'data-link': link,
        'data-hidden': vote < -2
      }, function() {
        var flag;
        div('.below-threshold', function() {
          span(function() {
            return 'Content is below ';
          });
          span('.num', function() {
            return '-2';
          });
          return span(function() {
            return ' threshold. Click to view anyway';
          });
        });
        if (!answer) {
          div('.voting', function() {
            div({
              'data-arrow': 'up'
            });
            div(".vote", function() {});
            return div({
              'data-arrow': 'down'
            });
          });
        }
        div('.question-title', function() {
          return title;
        });
        div('.question-body', function() {
          return question;
        });
        flag = true;
        div('.answers', function() {
          var ans, opt, _i, _results;
          _results = [];
          for (opt = _i = 1; _i <= 4; opt = ++_i) {
            ans = data["answer_" + opt];
            if (!ans) {
              continue;
            }
            div(function() {
              span('.count', function() {
                return "" + (ans.count || 0);
              });
              return span('.text', {
                data: {
                  answer: "answer_" + opt,
                  next: ans.next,
                  selected: answer === ("answer_" + opt)
                }
              }, function() {
                return ans.text;
              });
            });
            _results.push(flag = flag && ans.next);
          }
          return _results;
        });
        if (!flag && !answer) {
          return div('.asterisk', function() {
            return 'dead end';
          });
        }
      });
    });
  };
  renderQuestion = function(link, previous) {
    var $questions, getNextQ, time;
    if (link == null) {
      link = "fun";
    }
    if (previous == null) {
      previous = false;
    }
    if (!previous) {
      past_questions = [];
    }
    time = $('body > .container > .header .time[data-selected=true]').data('time') || 'all';
    switch (time) {
      case 'hour':
        start_time = Date.now() - 60 * 60 * 1000;
        break;
      case 'day':
        start_time = Date.now() - 24 * 60 * 60 * 1000;
        break;
      case 'year':
        start_time = Date.now() - 365 * 24 * 60 * 60 * 1000;
        break;
      case 'all':
        start_time = 0;
    }
    getNextQ = function(finish) {
      if (link) {
        return ref.child(link).orderByChild('created').startAt(start_time).endAt(Date.now()).once('value', function(doc) {
          var items, key, new_items, val;
          items = doc.val() || {};
          new_items = [];
          for (key in items) {
            val = items[key];
            val.key = key;
            val.link = link;
            new_items.push(val);
          }
          new_items = new_items.sort(function(a, b) {
            return b.vote - a.vote;
          });
          return finish(new_items);
        });
      } else {
        return finish(null);
      }
    };
    $('body .questions-container').html(teacup.render(function() {
      return div('.questions');
    }));
    $questions = $('body .questions');
    $questions.attr('data-link', link);
    $questions.attr('data-previous', previous);
    $(window).off('resize', function() {});
    $(window).on('resize', function() {
      var width;
      width = Math.floor($(window).width() / 340);
      return $('.questions-container').css('max-width', "" + (width * 340) + "px");
    });
    return getNextQ(function(new_items) {
      var $new_question;
      if (new_items != null ? new_items.length : void 0) {
        new_items.forEach(function(child_item) {
          var $question, item, key, question, title, vote, _ref;
          _ref = child_item || {}, question = _ref.question, vote = _ref.vote, title = _ref.title, key = _ref.key;
          if (!(question && title)) {
            return false;
          }
          item = localStorage.getItem(key) || {};
          $question = $(questionHtml(child_item));
          $questions.append($question);
          return (function($question) {
            $question.find('.below-threshold').on('click', function(e) {
              $(e.currentTarget).closest('[data-hidden]').attr('data-hidden', false);
              return window.msnry.masonry();
            });
            $question.find('[data-arrow]').on('click', function(e) {
              var $el, incriment, modified_incriment;
              $el = $(e.currentTarget);
              incriment = $el.data('arrow') === 'up' ? 1 : -1;
              item = JSON.parse(localStorage.getItem(key) || '{}');
              modified_incriment = incriment;
              if (item.vote === incriment) {
                modified_incriment = incriment * -1;
                incriment = 0;
              } else if (item.vote === incriment * -1) {
                modified_incriment = incriment * 2;
              }
              item.vote = incriment;
              item.vote_inverse = incriment * -1;
              localStorage.setItem(key, JSON.stringify(item));
              return ref.child("" + link + "/" + key + "/vote").once('value', function(current_vote_doc) {
                var currentVote, new_val;
                currentVote = (current_vote_doc != null ? current_vote_doc.val() : void 0) || 0;
                new_val = currentVote + modified_incriment;
                ref.child("" + link + "/" + key + "/vote").set(new_val);
                return ref.child("" + link + "/" + key + "/vote_inverse").set(new_val * -1);
              });
            });
            [1, 2, 3, 4].forEach(function(opt) {
              var ans;
              ans = child_item["answer_" + opt];
              if (!ans) {
                return;
              }
              return ref.child("" + link + "/" + key + "/answer_" + opt + "/count").on('value', function(count_doc) {
                return $question.find("[data-answer=answer_" + opt + "]").prev().text("" + (count_doc.val() || 0));
              });
            });
            ref.child("" + link + "/" + key + "/vote").on('value', function(vote_doc) {
              var $vote, local_vote, new_vote;
              new_vote = (vote_doc != null ? vote_doc.val() : void 0) || 0;
              $vote = $question.find('.vote');
              $vote.html("" + new_vote);
              $vote.toggleClass('bad', new_vote < 0);
              $vote.toggleClass('good', new_vote > 5);
              item = JSON.parse(localStorage.getItem(key) || '{}');
              local_vote = 'none';
              if (item.vote > 0) {
                local_vote = 'up';
              } else if (item.vote < 0) {
                local_vote = 'down';
              }
              return $question.attr('data-vote', local_vote);
            });
            $question.find('.answers .text').on('click', function(e) {
              var $el, key_previous, next;
              $el = $(e.currentTarget);
              next = $el.data('next');
              key = $el.closest('.question').data('key');
              key_previous = "" + link + "/" + key + "/" + ($el.data('answer'));
              return ref.child("" + key_previous + "/count").transaction((function(currentCount) {
                if (currentCount == null) {
                  currentCount = 0;
                }
                return currentCount + 1;
              }), function(error, committed, ss) {
                if (err) {
                  return;
                }
                if (!committed) {
                  return;
                }
                child_item.answer = $el.data('answer');
                child_item[child_item.answer].count = ss.val();
                past_questions.unshift(child_item);
                return renderQuestion(next, key_previous);
              });
            });
            return false;
          })($question);
        });
      } else {
        $questions.append($(teacup.render(function() {
          return div('.question.no-border', function() {
            return span(function() {
              return 'Oops looks like the end of the road, no content yet.. click the box to add some!';
            });
          });
        })));
      }
      $new_question = $(teacup.render(function() {
        return div('.question', function() {
          div('.open-pop', function() {
            if (previous) {
              return 'add branch at this point';
            } else {
              return 'Create new story';
            }
          });
          if (previous) {
            div('.past', {
              'data-count': 0
            }, function() {
              div('.topic', function() {
                return 'previous answers';
              });
              i(".material-icons.link", function() {
                return 'link';
              });
              div('.modalDialog.link_popup', function() {
                return div('.wrapper-pop', function() {
                  h3(function() {
                    return 'Share a link to this point';
                  });
                  span({
                    "class": 'close'
                  }, function() {
                    return 'X';
                  });
                  h3('.link-to-share', 'http://www.google.com');
                  return div('#socials');
                });
              });
              div('.options', function() {
                i(".material-icons.back", {
                  'data-disabled': "" + (past_questions.length === 1)
                }, function() {
                  return 'navigate_before';
                });
                span('.jump', function() {
                  return 'jump here';
                });
                return i('.material-icons.next', {
                  'data-disabled': "true"
                }, function() {
                  return 'navigate_next';
                });
              });
              return div('.old-questions', function() {
                return raw(questionHtml(past_questions[0], '.old-question'));
              });
            });
          }
          return div('.modalDialog.new', function() {
            return div('.new-question', function() {
              h3(function() {
                return 'Submitting a new Post';
              });
              span({
                "class": 'close'
              }, function() {
                return 'X';
              });
              return form(function() {
                div('.text-area-container', function() {
                  textarea('.question-title', {
                    'data-maxlength': 120,
                    placeholder: "Add title",
                    required: true
                  });
                  div('.resizer question-body', function() {
                    return 'A';
                  });
                  return div('.characters', function() {
                    return '';
                  });
                });
                div('.text-area-container', function() {
                  textarea('.question-body', {
                    'data-maxlength': 250,
                    placeholder: "Add your body",
                    required: true
                  });
                  div('.resizer question-body', function() {
                    return 'A';
                  });
                  return div('.characters', function() {
                    return '';
                  });
                });
                div('.answers', function() {
                  var opt, _i, _results;
                  _results = [];
                  for (opt = _i = 1; _i <= 4; opt = ++_i) {
                    _results.push(div('.text-area-container', function() {
                      var placeholder, required;
                      required = opt === 1;
                      placeholder = required ? 'Put choice here' : 'Put (optional) choice here';
                      textarea(".answer_" + opt, {
                        'data-maxlength': 140,
                        placeholder: placeholder,
                        required: required
                      });
                      div('.resizer', function() {
                        return 'A';
                      });
                      return div('.characters', function() {
                        return '';
                      });
                    }));
                  }
                  return _results;
                });
                return input({
                  type: 'submit',
                  value: 'submit'
                });
              });
            });
          });
        });
      }));
      (function($new_question) {
        $questions.prepend($new_question);
        $questions.find('.open-pop, .modalDialog.new .close').on('click', function() {
          return $new_question.find('.modalDialog.new').toggleClass('visible');
        });
        $new_question.find('.options .jump').on('click', function(e) {
          var $el, answer, index, key, key_previous, old_link, _ref;
          $el = $(e.currentTarget);
          index = $el.closest('.past').data('count');
          previous = false;
          if (past_questions[index + 1]) {
            _ref = past_questions[index + 1], key = _ref.key, link = _ref.link, answer = _ref.answer;
            key_previous = "" + link + "/" + key + "/" + answer + "}";
          }
          old_link = past_questions[index].link;
          past_questions.splice(0, index + 1);
          return renderQuestion(old_link, key_previous);
        });
        $questions.find('.modalDialog.link_popup .close').on('click', function() {
          return $new_question.find('.modalDialog.link_popup').removeClass('visible');
        });
        $new_question.find('.link').on('click', function() {
          var $header, c, new_key, past_questions_copy, q, _i, _j, _len, _ref, _ref1;
          past_questions_copy = $.extend({}, past_questions);
          for (_i = 0, _len = past_questions_copy.length; _i < _len; _i++) {
            q = past_questions_copy[_i];
            for (c = _j = 1; _j <= 4; c = ++_j) {
              if (q != null ? (_ref = q["answer_" + c]) != null ? _ref.count : void 0 : void 0) {
                if (q != null) {
                  if ((_ref1 = q["answer_" + c]) != null) {
                    delete _ref1.count;
                  }
                }
              }
            }
          }
          new_key = links_ref.push().key();
          $header = $('body > .container > .header');
          return links_ref.child(new_key).set({
            time: $header.find('.times [data-selected="true"]').data('time'),
            subject: $header.find('.subjects [data-selected="true"]').data('subject'),
            past_questions: past_questions_copy,
            current: {
              link: link,
              previous: previous
            }
          }, function(e, a) {
            var $pop;
            $pop = $new_question.find('.modalDialog.link_popup');
            $pop.find("#socials").jsSocials({
              url: "https://infernalscoop.com?link=" + new_key,
              showLabel: false,
              showCount: false,
              shares: ["email", "twitter", "facebook", "linkedin", "pinterest", "stumbleupon", "whatsapp"]
            });
            $pop.find('.link-to-share').text("https://infernalscoop.com?link=" + new_key);
            return $pop.toggleClass('visible');
          });
        });
        $new_question.find('.options .back, .options .next').on('click', function(e) {
          var $el, $old_q, $past, index, new_index;
          $el = $(e.currentTarget);
          $past = $el.closest('.past');
          if ($el.attr('data-disabled') === 'true') {
            return;
          }
          index = $el.closest('.past').data('count');
          new_index = index + ($el.hasClass('back') ? 1 : -1);
          $el.closest('.past').data('count', new_index);
          $old_q = $past.find('.old-questions');
          $past.find('.back').attr('data-disabled', "" + (!Boolean(past_questions[new_index + 1])));
          $past.find('.next').attr('data-disabled', "" + (!Boolean(past_questions[new_index - 1])));
          $old_q.html(questionHtml(past_questions[new_index], '.old-question'));
          return window.msnry.masonry();
        });
        $new_question.find('textarea').on('input', function(e) {
          var $el, maxlength, str;
          $el = $(e.currentTarget);
          maxlength = $el.attr('data-maxlength');
          str = $el.val().slice(0, maxlength);
          $el.val(str);
          if (str.length === 0) {
            $el.next().html("");
            $el.siblings('.characters').html('');
          } else {
            $el.next().html("" + str + "\n\n");
            $el.siblings('.characters').html(maxlength - str.length);
          }
          return false;
        });
        return $new_question.find('form').on('submit', function(e) {
          var $el, answer, c, new_q, new_q_obj, opt, _i;
          if (!link) {
            link = "leaf/" + (ref.child('leaf').push().key());
          }
          $el = $(e.currentTarget);
          new_q = ref.child(link).push();
          new_q_obj = {
            answer_1: {
              text: $el.find('textarea.answer_1').val()
            },
            question: $el.find('textarea.question-body').val(),
            title: $el.find('textarea.question-title').val(),
            created: Firebase.ServerValue.TIMESTAMP,
            vote: 0,
            vote_inverse: 0
          };
          c = 2;
          for (opt = _i = 2; _i <= 4; opt = ++_i) {
            answer = $el.find("textarea.answer_" + opt).val();
            if (!answer) {
              continue;
            }
            new_q_obj["answer_" + c] = {
              text: answer
            };
            c++;
          }
          new_q.set(new_q_obj, function() {
            var question_location;
            if (!previous) {
              return renderQuestion(link, previous);
            }
            question_location = "" + link + "/" + (new_q.key());
            return ref.child("" + previous + "/next").set(link, function() {
              return renderQuestion(link, previous);
            });
          });
          return false;
        });
      })($new_question);
      window.msnry = $('.questions').masonry({
        itemSelector: '.question',
        layoutPriorities: {
          upperPosition: 1,
          shelfOrder: 1
        }
      });
      $('.questions').data('masonry');
      return $(window).trigger('resize');
    });
  };
  renderHeader();
  history_link = url('?link');
  if (!history_link) {
    return renderQuestion(subject_selected);
  } else {
    return links_ref.child(history_link).once('value', function(history_link_doc) {
      var history_links;
      history_links = history_link_doc.val();
      if (history_links) {
        past_questions = history_links.past_questions;
        subject_selected = history_links.subject;
        times_selected = history_links.time;
        return renderQuestion(history_links.current.link, history_links.current.previous);
      } else {
        return renderQuestion(subject_selected);
      }
    });
  }
});
